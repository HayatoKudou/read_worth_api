openapi: 3.0.0
info:
  version: 1.0.0
  title: Read Worth API
servers:
  - url: "http://localhost:8000/"
paths:
  /connect/google:
    get:
      summary: Google連携
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectGoogleResponse"
  /api/feedBack/send:
    post:
      summary: フィードバック送信
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/feedBackSendRequest"
      responses:
        "200":
          description: "OK"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/feedBackSendValidateErrorResponse"
  /api/{workspaceId}/me:
    get:
      summary: 自分の情報
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeResponse"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
    put:
      summary: プロフィール更新
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeUpdateRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "他ユーザーのプロフィールを更新しようとした場合"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeUpdateValidateErrorResponse"
  /api/{workspaceId}/users:
    get:
      summary: ワークスペースに所属しているユーザー情報
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersListResponse"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
  /api/{workspaceId}/user:
    put:
      summary: ユーザー更新
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserUpdateValidateErrorResponse"
    post:
      summary: ユーザー追加
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreateValidateErrorResponse"
    delete:
      summary: ユーザー削除
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDeleteRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
        "422":
          description: "バリデーションエラー"
  /api/{workspaceId}/workspace:
    get:
      summary: ワークスペース情報
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceResponse"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
    put:
      summary: ワークスペース更新
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceUpdateRequest"
      responses:
        "201":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceUpdateValidateErrorResponse"
    post:
      summary: ワークスペース追加
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceCreateRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceCreateValidateErrorResponse"
  /api/{workspaceId}/workspaces:
    get:
      summary: ワークスペース一覧
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspacesResponse"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
  /api/{workspaceId}/books:
    get:
      summary: 書籍一覧
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooksResponse"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
  /api/{workspaceId}/book:
    put:
      summary: 書籍更新
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookUpdateRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookUpdateValidateErrorResponse"
  /api/{workspaceId}/bookCategory:
    post:
      summary: 書籍カテゴリ追加
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookCategoryCreateRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookCategoryCreateValidateErrorResponse"
    delete:
      summary: 書籍カテゴリ削除
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookCategoryDeleteRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
        "422":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookCategoryDeleteValidateErrorResponse"
  /api/{workspaceId}/bookPurchaseApplies:
    get:
      summary: 書籍購入申請一覧
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookPurchaseAppliesListResponse"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
  /api/{workspaceId}/{bookId}/histories:
    get:
      summary: 書籍履歴
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
        - in: path
          name: bookId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bookHistoriesListResponse"
        "401":
          description: "apiトークンが無効の場合"
        "403":
          description: "指定されたワークスペースにユーザーがいない場合"
  /api/slack/{workspaceId}/connect:
    get:
      summary: Slack連携
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          required: true
          example: 1
      security:
        - Bearer: [ ]
      responses:
        "200":
          description: "OK"

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bear
  schemas:
    connectGoogleResponse:
      type: object
      required:
        - connectUrl
      properties:
        connectUrl:
          type: string
          example: "https://google-sample"
    feedBackSendRequest:
      properties:
        message:
          type: string
          example: "Good!!"
      required:
        - message
    feedBackSendValidateErrorResponse:
      type: object
      properties:
        message:
          type: array
          items:
            type: string
            example: [ "メッセージは必ず指定してください。" ]
    MeResponse:
      type: object
      required:
        - id
        - name
        - email
        - apiToken
        - role
        - workspaces
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "工藤"
        email:
          type: string
          example: "tetetest@gmail.com"
        apiToken:
          type: string
          example: "xtGq57ENtxfHL7MB63jRoEhPM5d7Bah2rXRpUGowAuXsE2lzlM8DvnqH163T"
        role:
          type: object
          required:
            - isAccountManager
            - isBookManager
            - isWorkspaceManager
          properties:
            isAccountManager:
              type: boolean
              example: true
            isBookManager:
              type: boolean
              example: true
            isWorkspaceManager:
              type: boolean
              example: true
        workspaces:
          type: array
          items:
            type: object
            required:
              - id
              - name
            properties:
              id:
                type: number
                example: 1
              name:
                type: string
                example: "テテマーチ"
    MeUpdateRequest:
      properties:
        name:
          type: string
          example: "工藤"
        email:
          type: string
          example: "tetetest@gmail.com"
      required:
        - name
        - email
    MeUpdateValidateErrorResponse:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: [ "名前は必ず指定してください。" ]
        email:
          type: array
          items:
            type: string
            example: [ "メールアドレスは必ず指定してください。" ]
    UsersListResponse:
      required:
        - users
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - email
              - apiToken
              - role
            properties:
              id:
                type: number
                example: 1
              name:
                type: string
                example: "工藤"
              email:
                type: string
                example: "tetetest@gmail.com"
              apiToken:
                type: string
                example: "xtGq57ENtxfHL7MB63jRoEhPM5d7Bah2rXRpUGowAuXsE2lzlM8DvnqH163T"
              role:
                type: object
                required:
                  - isAccountManager
                  - isBookManager
                  - isWorkspaceManager
                properties:
                  isAccountManager:
                    type: boolean
                    example: true
                  isBookManager:
                    type: boolean
                    example: true
                  isWorkspaceManager:
                    type: boolean
                    example: true
    UserUpdateRequest:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "工藤"
        email:
          type: string
          example: "tetetest@gmail.com"
        roles:
          type: array
          example: [ "ワークスペース管理", "書籍管理" ]
          items:
            type: string
      required:
        - id
        - name
        - email
        - roles
    UserUpdateValidateErrorResponse:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
            example: [ "ユーザーIDは必ず指定してください。" ]
        name:
          type: array
          items:
            type: string
            example: [ "名前は必ず指定してください。" ]
        email:
          type: array
          items:
            type: string
            example: [ "メールアドレスは必ず指定してください。" ]
        roles:
          type: array
          items:
            type: string
            example: [ "ロールは必ず指定してください。" ]
    UserCreateRequest:
      properties:
        name:
          type: string
          example: "工藤"
        email:
          type: string
          example: "tetetest@gmail.com"
        roles:
          type: array
          example: [ "ワークスペース管理", "書籍管理" ]
          items:
            type: string
      required:
        - name
        - email
        - roles
    UserCreateValidateErrorResponse:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: [ "名前は必ず指定してください。" ]
        email:
          type: array
          items:
            type: string
            example: [ "メールアドレスは必ず指定してください。" ]
        roles:
          type: array
          items:
            type: string
            example: [ "ロールは必ず指定してください。" ]
    UserDeleteRequest:
      properties:
        userIds:
          type: array
          example: [ 1, 2 ]
          items:
            type: integer
      required:
        - userIds
    WorkspaceResponse:
      required:
        - id
        - name
        - plan
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "工藤"
        plan:
          type: string
          example: "工藤"
    WorkspaceUpdateRequest:
      properties:
        name:
          type: string
          example: "テテマーチ"
        plan:
          type: string
          example: "テテマーチ"
      required:
        - name
        - plan
    WorkspaceUpdateValidateErrorResponse:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: [ "ワークスペース名は必ず指定してください。" ]
        plan:
          type: array
          items:
            type: string
            example: [ "プランは必ず指定してください。" ]
    WorkspaceCreateRequest:
      properties:
        name:
          type: string
          example: "テテマーチ"
      required:
        - name
    WorkspaceCreateValidateErrorResponse:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: [ "名前は必ず指定してください。" ]
    WorkspacesResponse:
      type: array
      items:
        required:
          - id
          - name
          - plan
        type: object
        properties:
          id:
            type: number
            example: 1
          name:
            type: string
            example: "工藤"
          plan:
            type: string
            example: "工藤"
    BooksResponse:
      required:
        - books
        - bookCategories
      type: object
      properties:
        books:
          type: array
          items:
            type: object
            required:
              - id
              - status
              - category
              - title
              - description
              - image
              - url
              - createdAt
              - purchaseApplicant
              - rentalApplicant
              - reviews
              - rentalCount
            properties:
              id:
                type: integer
                example: 1
              status:
                type: integer
                example: 1
              category:
                type: string
                example: "IT"
              title:
                type: string
                example: "プロダクトレッドグロース"
              description:
                type: string
                example: "マーケティングの本"
              image:
                type: string
                nullable: true
                example: "gvdsngvaongaflafafeao"
              url:
                type: string
                example: "https://www.amazon.co.jp/gp/product/4297128462/ref=ox_sc_saved_image_3?smid=AN1VRQENFRJN5&psc=1"
              createdAt:
                type: string
                example: "2022/08/01"
              purchaseApplicant:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  name:
                    type: string
                    example: "たかし君"
              rentalApplicant:
                type: object
                properties:
                  id:
                    type: number
                    example: 1
                  name:
                    type: string
                    example: "たかし君"
                  expectedReturnDate:
                    type: string
                    example: "2022-10-08"
              reviews:
                type: array
                items:
                  required:
                    - rate
                    - review
                    - reviewedAt
                    - reviewer
                  type: object
                  properties:
                    rate:
                      type: number
                      example: 4
                    review:
                      type: string
                      example: "いい本だった"
                    reviewedAt:
                      type: string
                      example: "2022年09月04日 13時56分"
                    reviewer:
                      type: string
                      example: "たなか君"
              rentalCount:
                type: number
                example: 5
        bookCategories:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: "ALL"
    BookUpdateRequest:
      required:
        - id
        - category
        - status
        - title
        - image
      type: object
      properties:
        id:
          type: integer
          example: 1
        category:
          type: string
          example: "IT"
        status:
          type: integer
          example: 1
        title:
          type: string
          example: "すごい本"
        description:
          type: string
          example: "すごいことが書かれている本"
        image:
          type: string
          nullable: true
          example: "gvdsngvaongaflafafeao"
        url:
          type: string
          nullable: true
          example: "https://www.amazon.co.jp/%E5%90%8D%E5%8F%96%E3%81%95%E3%81%AA-%E5%85%AC%E5%BC%8F%E5%90%8C%E4%BA%BA%E8%AA%8C-%E3%81%9D%E3%81%93%E3%81%BE%E3%81%A7%E8%96%84%E3%81%8F%E3%81%AF%E3%81%AA%E3%81%84%E6%9C%AC-%E5%90%8D%E5%8F%96-%E3%81%95%E3%81%AA-ebook/dp/B08SW59KYQ/?_encoding=UTF8&pd_rd_w=iHhuf&content-id=amzn1.sym.af35e228-fbbe-4fd1-8057-e8d8d004b773&pf_rd_p=af35e228-fbbe-4fd1-8057-e8d8d004b773&pf_rd_r=7JM6CNDNKTA4C0H53HVB&pd_rd_wg=bxbZ5&pd_rd_r=32c17768-2e9f-4f4f-a523-fb08d2fe6eec&ref_=pd_gw_ci_mcx_mi"
    BookUpdateValidateErrorResponse:
      type: object
      properties:
        id:
          type: array
          items:
            type: string
            example: [ "IDは必ず指定してください。" ]
        category:
          type: array
          items:
            type: string
            example: [ "カテゴリは必ず指定してください。" ]
        status:
          type: array
          items:
            type: string
            example: [ "ステータスは必ず指定してください。" ]
        title:
          type: array
          items:
            type: string
            example: [ "タイトルは、255文字以下で指定してください。" ]
        description:
          type: array
          items:
            type: string
            example: [ "本の説明は、255文字以下で指定してください。" ]
    BookCategoryCreateRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: "IT"
    BookCategoryCreateValidateErrorResponse:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: [ "カテゴリ名は必ず指定してください。" ]
    BookCategoryDeleteRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: "IT"
    BookCategoryDeleteValidateErrorResponse:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: [ "カテゴリ名は必ず指定してください。" ]
    bookPurchaseAppliesListResponse:
      required:
        - slackCredentialExists
        - bookPurchaseApplies
      type: object
      properties:
        slackCredentialExists:
          type: boolean
          example: true
        bookPurchaseApplies:
          type: array
          items:
            type: object
            required:
              - reason
              - price
              - step
              - location
              - createdAt
              - user
              - book
            properties:
              reason:
                type: string
                example: "読みたいから"
              price:
                type: integer
                example: 3000
              step:
                type: integer
                example: 1
              location:
                type: string
                example: "7F本棚"
              createdAt:
                type: string
                example: "2022/08/01"
              user:
                type: object
                required:
                  - id
                  - name
                  - email
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "工藤"
                  email:
                    type: string
                    example: "kudoh115@gmail.com"
              book:
                type: object
                required:
                  - id
                  - status
                  - category
                  - title
                  - description
                  - image
                  - url
                  - createdAt
                properties:
                  id:
                    type: integer
                    example: 1
                  status:
                    type: integer
                    example: 1
                  category:
                    type: string
                    example: "IT"
                  title:
                    type: string
                    example: "プロダクトレッドグロース"
                  description:
                    type: string
                    example: "マーケティングの本"
                  image:
                    type: string
                    nullable: true
                    example: "gvdsngvaongaflafafeao"
                  url:
                    type: string
                    example: "https://www.amazon.co.jp/gp/product/4297128462/ref=ox_sc_saved_image_3?smid=AN1VRQENFRJN5&psc=1"
                  createdAt:
                    type: string
                    example: "2022/08/01"
    bookHistoriesListResponse:
      type: array
      items:
        type: object
        required:
          - userName
          - actionName
          - createdAt
        properties:
          userName:
            type: string
            example: "工藤"
          actionName:
            type: string
            example: "create book"
          createdAt:
            type: string
            example: "2022/08/01"
